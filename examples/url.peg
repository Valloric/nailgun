# URL
# RFC 3986 URI Generic Syntax
# From: https://github.com/ermine/kombain/blob/db7acb2c5d387bb251f6a6e5067e27e4f116195d/url/url.peg
# License: 3-BSD

URI           <- scheme ":" hier_part? ("?" query )? ("#" fragment)?

hier_part     <- "//" authority path_abempty
               / path_absolute
               / path_rootless

URI_reference <- URI / relative_ref

absolute_URI  <- scheme ":" hier_part? ("?" query)?

relative_ref  <- relative_part? ("?" query)? ("#" fragment)?

relative_part <- "//" authority path_abempty
               / path_absolute
               / path_noscheme

scheme        <- ALPHA ( ALPHA / DIGIT / "+" / "-" / "." )*

authority     <- (userinfo "@")? host (":" port)?
userinfo      <- (unreserved / pct_encoded / sub_delims / ":")*
host          <- IP_literal / IPv4address / reg_name
port          <- DIGIT*

IP_literal    <- "[" ( IPv6address / IPvFuture  ) "]"

IPvFuture     <- "v" HEXDIG+ "." (unreserved / sub_delims / ":")+

IPv6address   <-  h16 ":" h16 ":" h16 ":" h16 ":" h16 ":" h16 ":" ls32
               / "::" h16 ":" h16 ":" h16 ":" h16 ":" h16 ":" ls32
               / h16? "::" h16 ":" h16 ":" h16 ":" h16 ":" ls32

               / ((h16 ":")? h16)? "::" h16 ":" h16 ":" h16 ":" ls32

                # TODO: fix this *2, *3 etc nonsense
               / [ *2( h16 ":" ) h16 ] "::" h16 ":" h16 ':' ls32
               / [ *3( h16 ":" ) h16 ] "::" h16 ":" ls32
               / [ *4( h16 ":" ) h16 ] "::" ls32
               / [ *5( h16 ":" ) h16 ] "::" h16
               / [ *6( h16 ":" ) h16 ] "::"

h16           <- HEXDIGIT (HEXDIGIT (HEXDIGIT HEXDIGIT?)?)?
ls32          <- h16 ":" h16 / IPv4address
IPv4address   <- dec_octet "." dec_octet "." dec_octet "." dec_octet

dec_octet     <- DIGIT                 # 0-9
               / [\x31-\x39] DIGIT     # 10-99
               / "1" DIGIT DIGIT       # 100-199
               / "2" [\x30-\x34] DIGIT # 200-249
               / "25" [\x30-\x35]      # 250-255

reg_name      <- ( unreserved / pct_encoded / sub_delims )*

path_abempty  <- ( "/" segment )*
path_absolute <- "/" ( segment_nz ( "/" segment )* )?
path_noscheme <- segment_nz_nc ( "/" segment )*
path_rootless <- segment_nz ( "/" segment )*

segment       <- pchar*
segment_nz    <- pchar+
segment_nz_nc <- ( unreserved / pct_encoded / sub_delims / "@" )+
                 # non-zero-length segment without any colon ":"

pchar         <- unreserved / pct_encoded / sub_delims / ":" / "@"

query         <- ( pchar / "/" / "?" )*

fragment      <- ( pchar / "/" / "?" )*

pct_encoded   <- "%" HEXDIG HEXDIG

unreserved    <- ALPHA / DIGIT / "-" / "." / "_" / "~"
reserved      <- gen_delims / sub_delims
gen_delims    <- ":" / "/" / "?" / "#" / "[" / "]" / "@"
sub_delims    <- "!" / "$" / "&" / "'" / "(" / ")"
                        / "*" / "+" / "," / ";" / "="

